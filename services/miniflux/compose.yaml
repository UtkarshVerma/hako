include:
  - ../traefik/compose.yaml

services:
  miniflux:
    container_name: miniflux
    image: ghcr.io/miniflux/miniflux:latest
    depends_on:
      postgres:
        condition: service_healthy

    user: $PUID:$PGID
    read_only: true
    security_opt:
      - no-new-privileges
    cap_drop:
      - ALL

    networks:
      - miniflux
      - traefik

    expose:
      - 8080

    environment:
      DATABASE_URL: postgresql://miniflux:${MINIFLUX_DB_PASSWORD}@postgres?sslmode=disable
      RUN_MIGRATIONS: 1
      CREATE_ADMIN: 1
      ADMIN_USERNAME: $MINIFLUX_USER
      ADMIN_PASSWORD: $MINIFLUX_PASSWORD
      BASE_URL: https://miniflux.$DOMAIN

    labels:
      traefik.enable: true
      traefik.http.routers.miniflux.rule: Host(`miniflux.$DOMAIN`)
      traefik.http.routers.miniflux.entrypoints: websecure
      traefik.http.routers.miniflux.tls.certresolver: le

    restart: unless-stopped

  postgres:
    container_name: postgres
    image: docker.io/postgres:17-alpine
    healthcheck:
      test: [CMD, pg_isready, -U, miniflux]
      interval: 10s
      start_period: 30s

    user: $PUID:$PGID
    read_only: true
    security_opt:
      - no-new-privileges
    cap_drop:
      - ALL

    environment:
      POSTGRES_USER: miniflux
      POSTGRES_PASSWORD: $MINIFLUX_DB_PASSWORD
      PGDATA: /var/lib/postgresql/data/db-files
      POSTGRES_DB: miniflux

    networks:
      - miniflux

    volumes:
      - ./state/postgres:/var/lib/postgresql/data:rw
      - /etc/passwd:/etc/passwd:ro

    tmpfs:
      - /var/run/postgresql:noexec,uid=$PUID,gid=$PGID

    restart: unless-stopped

networks:
  miniflux:
    name: miniflux
    driver: bridge
